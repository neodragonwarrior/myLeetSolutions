//Input: candidates = [2,3,6,7], target = 7
//Output: [[2,2,3],[7]]
//Explanation:
//2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
//7 is a candidate, and 7 = 7.
//These are the only two combinations.



class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
      List<List<Integer>> results = new ArrayList<>();
        
        if (candidates == null || candidates.length == 0) {
            return results;
        }
        
        Arrays.sort(candidates);
        
        List<Integer> comb = new ArrayList<>();

        findPairs(results, comb, candidates, target, 0);
        
        return results;
    }
    
    private void findPairs(List<List<Integer>> results, List<Integer> comb, int[] candidates, int target, int startIndex) {
        if (target == 0) {
            results.add(new ArrayList<>(comb));
            return;
        }
        
        for (int i = startIndex; i < candidates.length; i++) {
            if (candidates[i] > target) {
                break;
            }         
            
            comb.add(candidates[i]);
            findPairs(results, comb, candidates, target - candidates[i], i);
            comb.remove(comb.size() - 1);
        }        
    }
}
